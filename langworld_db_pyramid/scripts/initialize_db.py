import argparse
from copy import copy
from functools import partial
import sys

from pyramid.paster import bootstrap, setup_logging
from sqlalchemy import delete
from sqlalchemy.exc import OperationalError

from langworld_db_data.langworld_db_data.filetools.csv_xls import read_csv
from langworld_db_data.langworld_db_data.constants.paths import (
    FEATURE_PROFILES_DIR,
    FILE_WITH_CATEGORIES,
    FILE_WITH_COUNTRIES,
    FILE_WITH_DOCULECTS,
    FILE_WITH_ENCYCLOPEDIA_VOLUMES,
    FILE_WITH_LISTED_VALUES,
    FILE_WITH_NAMES_OF_FEATURES,
)

from .. import models


def setup_models(dbsession):
    """
    Add or update models / fixtures in the database.

    """
    # delete all existing data
    for model in (
        models.Country, models.Doculect, models.DoculectType, models.EncyclopediaVolume,
        models.FeatureCategory, models.Feature, models.FeatureValue,
        # models.association_doculect_to_feature_value,
        # TODO how to delete data from this table?
    ):
        dbsession.execute(delete(model))

    read_dict = partial(read_csv, read_as='dicts')

    country_rows = read_dict(FILE_WITH_COUNTRIES)
    doculect_rows = read_dict(FILE_WITH_DOCULECTS)
    encyclopedia_rows = read_dict(FILE_WITH_ENCYCLOPEDIA_VOLUMES)

    feature_category_rows = read_dict(FILE_WITH_CATEGORIES)
    feature_rows = read_dict(FILE_WITH_NAMES_OF_FEATURES)
    feature_value_rows = read_dict(FILE_WITH_LISTED_VALUES)

    category_for_man_id = {}
    for category_row in feature_category_rows:
        category = models.FeatureCategory(
            man_id=category_row['id'],
            name_en=category_row['en'],
            name_ru=category_row['ru'],
        )
        dbsession.add(category)
        category_for_man_id[category_row['id']] = category

    feature_for_man_id = {}
    for feature_row in feature_rows:
        feature = models.Feature(
            man_id=feature_row['id'],
            name_en=feature_row['en'],
            name_ru=feature_row['ru'],
        )
        feature.category = category_for_man_id[feature_row['id'].split('-')[0]]  # TODO add column feature_id to CSV?
        dbsession.add(feature)
        feature_for_man_id[feature_row['id']] = feature

    value_for_man_id = {}
    for value_row in feature_value_rows:
        value = models.FeatureValue(
            man_id=value_row['id'],
            name_en=value_row['en'],
            name_ru=value_row['ru'],
        )
        value.feature = feature_for_man_id[value_row['feature_id']]
        dbsession.add(value)
        value_for_man_id[value_row['id']] = value

    country_for_man_id = {}
    for country_row in country_rows:
        country = models.country.Country(
            man_id=country_row['id'],
            iso=country_row['ISO 3166-1 alpha-3'],
            is_historical=int(country_row['is_historical']),
            name_en=country_row['en'],
            name_ru=country_row['ru'],
        )
        dbsession.add(country)
        country_for_man_id[country_row['id']] = country

    encyclopedia_volume_for_id = {}

    for encyclopedia_row in encyclopedia_rows:
        volume = models.encyclopedia_volume.EncyclopediaVolume(**encyclopedia_row)
        dbsession.add(volume)
        encyclopedia_volume_for_id[volume.id] = volume

    type_language = models.DoculectType(name_en='language', name_ru='язык')
    type_dialect = models.DoculectType(name_en='dialect', name_ru='диалект')
    type_mixed = models.DoculectType(name_en='language_dialect', name_ru='язык/диалект')
    type_for_name = {'language': type_language, 'dialect': type_dialect, 'language/dialect': type_mixed}
    for doculect_type in type_for_name.values():
        dbsession.add(doculect_type)

    for doculect_row in doculect_rows:
        doculect_row_to_write = copy(doculect_row)

        doculect_row_to_write['man_id'] = doculect_row_to_write['id']
        del doculect_row_to_write['id']  # ID will be autogenerated integer

        main_country = country_for_man_id[doculect_row_to_write['main_country_id']]
        del doculect_row_to_write['main_country_id']  # should be autogenerated from ForeignKey

        encyclopedia_volume = None
        if doculect_row_to_write['encyclopedia_volume_id']:  # should be there for every doculect, actually
            encyclopedia_volume = encyclopedia_volume_for_id[doculect_row_to_write['encyclopedia_volume_id']]

        del doculect_row_to_write['encyclopedia_volume_id']

        for bool_key in ('is_extinct', 'is_multiple', 'has_feature_profile'):
            doculect_row_to_write[bool_key] = int(doculect_row_to_write[bool_key])

        type_of_this_doculect = type_for_name[doculect_row_to_write['type']]
        del doculect_row_to_write['type']

        # print(row)
        doculect = models.doculect.Doculect(**doculect_row_to_write)

        doculect.main_country = main_country
        doculect.type = type_of_this_doculect

        if encyclopedia_volume:
            doculect.encyclopedia_volume = encyclopedia_volume

        # TODO some mess in using doculect_row or doculect_row_to_write
        if doculect_row['has_feature_profile'] == '1':
            feature_profile_rows = read_dict(FEATURE_PROFILES_DIR / f"{doculect_row['id']}.csv")

            # TODO: for now trying only with listed values, but this must change
            for feature_profile_row in feature_profile_rows:
                if feature_profile_row['value_id']:
                    value = value_for_man_id[feature_profile_row['value_id']]
                    doculect.feature_values.append(value)

        dbsession.add(doculect)


def parse_args(argv):
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'config_uri',
        help='Configuration file, e.g., development.ini',
    )
    return parser.parse_args(argv[1:])


def main(argv=sys.argv):
    args = parse_args(argv)
    setup_logging(args.config_uri)
    env = bootstrap(args.config_uri)

    try:
        with env['request'].tm:
            dbsession = env['request'].dbsession
            setup_models(dbsession)
    except OperationalError as e:
        print('''
Pyramid is having a problem using your SQL database.  The problem
might be caused by one of the following things:

1.  You may need to initialize your database tables with `alembic`.
    Check your README.txt for description and try to run it.

2.  Your database server may not be running.  Check that the
    database server referred to by the "sqlalchemy.url" setting in
    your "development.ini" file is running.
            ''')
        print(str(e))
