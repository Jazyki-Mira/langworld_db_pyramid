import argparse
from copy import copy
import sys

from pyramid.paster import bootstrap, setup_logging
from sqlalchemy import delete
from sqlalchemy.exc import OperationalError

from langworld_db_data.langworld_db_data.filetools.csv_xls import read_csv
from langworld_db_data.langworld_db_data.constants.paths import FILE_WITH_COUNTRIES, FILE_WITH_DOCULECTS

from .. import models


def setup_models(dbsession):
    """
    Add or update models / fixtures in the database.

    """
    # delete all existing data
    dbsession.execute(delete(models.Country))
    dbsession.execute(delete(models.Doculect))

    country_rows = read_csv(FILE_WITH_COUNTRIES, read_as='dicts')
    doculect_rows = read_csv(FILE_WITH_DOCULECTS, read_as='dicts')
    
    country_for_man_id = {}

    for country_row in country_rows:
        country = models.country.Country(
            man_id=country_row['id'],
            iso=country_row['ISO 3166-1 alpha-3'],
            is_historical=int(country_row['historical']),
            name_en=country_row['en'],
            name_ru=country_row['ru'],
        )
        dbsession.add(country)
        country_for_man_id[country_row['id']] = country

    for doculect_row in doculect_rows:
        doculect_row_to_write = copy(doculect_row)
        
        doculect_row_to_write['string_id'] = doculect_row_to_write['id']
        del doculect_row_to_write['id']  # ID will be autogenerated integer

        main_country = country_for_man_id[doculect_row_to_write['main_country_id']]
        del doculect_row_to_write['main_country_id']  # should be autogenerated from ForeignKey

        for bool_key in ('is_extinct', 'is_multiple', 'has_feature_profile'):
            doculect_row_to_write[bool_key] = int(doculect_row_to_write[bool_key])

        # print(row)
        doculect = models.doculect.Doculect(**doculect_row_to_write)
        doculect.main_country = main_country

        dbsession.add(doculect)


def parse_args(argv):
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'config_uri',
        help='Configuration file, e.g., development.ini',
    )
    return parser.parse_args(argv[1:])


def main(argv=sys.argv):
    args = parse_args(argv)
    setup_logging(args.config_uri)
    env = bootstrap(args.config_uri)

    try:
        with env['request'].tm:
            dbsession = env['request'].dbsession
            setup_models(dbsession)
    except OperationalError as e:
        print('''
Pyramid is having a problem using your SQL database.  The problem
might be caused by one of the following things:

1.  You may need to initialize your database tables with `alembic`.
    Check your README.txt for description and try to run it.

2.  Your database server may not be running.  Check that the
    database server referred to by the "sqlalchemy.url" setting in
    your "development.ini" file is running.
            ''')
        print(str(e))
